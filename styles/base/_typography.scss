@use 'sass:math';
@use 'sass:map';
@use '../abstracts/breakpoints';

// TODO: Would this be better off as a typography component ?
// This is highly inspired by Material Design
// {@link https://react-md.dev/packages/typography/sassdoc}

/// The font family to use throughout the entire application.
/// @type String
$typography-font-family: 'Noto Sans', sans-serif !default;
// $typography-font-family-headings: 'Montserrat', sans-serif !default;
/// The max length a line of text can be on mobile devices.
/// @type Number
$typography-mobile-max-line-length: 17em !default;
/// The max length a line of text can be on larger screens (mostly desktops or
/// landscape tablets).
/// @type Number
$typography-desktop-max-line-length: 40em !default;
/// The device width that should be used to swap between the mobile and desktop
/// text container widths.
/// @type Number
$typography-text-container-breakpoint: 37.5rem !default;

/// The base styles for typography.
/// @type Map
$typography-base: (
	font-family: $typography-font-family,
	-moz-osx-font-smoothing: grayscale,
	-webkit-font-smoothing: antialiased,
);
@mixin typography-base {
	@each $key, $value in $typography-base {
		#{$key}: $value;
	}
}

///
/// Unit conversions
///
@function px-to-rem($px) {
	@if $px == null {
		@return null;
	}
	@return math.div($px, 16px) * 1rem;
}

@function get-letter-spacing_($tracking, $font-size) {
	@return math.div($tracking, $font-size * 16) * 1em;
}

///
/// Utils
///
@mixin typography-line-clamp($lines: 2) {
	-webkit-box-orient: vertical;
	-webkit-line-clamp: $lines;
	display: -webkit-box;
}

///
/// A Map of all the font weights.
///
$font-weight-values: (
	thin: 100,
	light: 300,
	regular: 400,
	medium: 500,
	bold: 700,
	black: 900,
) !default;

///
/// Responsive font based on viewport width
///
html {
	font-size: clamp(12px, 0.9rem + 0.25vw, 20px);
	line-height: 1.15;
	-webkit-text-size-adjust: 100%;

	@if mixin-exists(typography-base) {
		@include typography-base;
	}
}

a {
	color: var(--link-color);
	&:hover {
		text-decoration: underline;
	}
}

h1,
h2,
h3,
h4,
h5,
h6 {
	margin: 0 0 0.35em 0;
}

.headline1 {
	font-size: 6rem;
	line-height: 6rem;
	font-weight: map.get($font-weight-values, light);
	letter-spacing: get-letter-spacing_(-1.5, 6);
	text-decoration: inherit;
	text-transform: inherit;
}
.headline2 {
	font-size: 3.75rem;
	line-height: 3.75rem;
	font-weight: map.get($font-weight-values, light);
	letter-spacing: get-letter-spacing_(-0.5, 3.75);
	text-decoration: inherit;
	text-transform: inherit;
	font-stretch: condensed;
}
.headline3 {
	font-size: 3rem;
	line-height: 3.125rem;
	font-weight: map.get($font-weight-values, regular);
	letter-spacing: normal;
	text-decoration: inherit;
	text-transform: inherit;
}
.headline4 {
	font-size: 2.125rem;
	line-height: 2.5rem;
	font-weight: map.get($font-weight-values, regular);
	letter-spacing: get-letter-spacing_(0.25, 2.125);
	text-decoration: inherit;
	text-transform: inherit;
}
.headline5 {
	font-size: 1.5rem;
	line-height: 2rem;
	font-weight: map.get($font-weight-values, regular);
	letter-spacing: normal;
	text-decoration: inherit;
	text-transform: inherit;
}
.headline6 {
	font-size: 1.25rem;
	line-height: 2rem;
	font-weight: map.get($font-weight-values, medium);
	letter-spacing: get-letter-spacing_(0.25, 1.25);
	text-decoration: inherit;
	text-transform: inherit;
}
.subtitle1 {
	font-size: 1rem;
	line-height: 1.75rem;
	font-weight: map.get($font-weight-values, regular);
	letter-spacing: get-letter-spacing_(0.15, 1);
	text-decoration: inherit;
	text-transform: inherit;
}
.subtitle2 {
	font-size: 0.875rem;
	line-height: 1.375rem;
	font-weight: map.get($font-weight-values, medium);
	letter-spacing: get-letter-spacing_(0.1, 0.875);
	text-decoration: inherit;
	text-transform: inherit;
}
.body1 {
	font-size: 1rem;
	line-height: 1.5rem;
	font-weight: map.get($font-weight-values, regular);
	letter-spacing: get-letter-spacing_(0.25, 0.875);
	text-decoration: inherit;
	text-transform: inherit;
}
.body2 {
	font-size: 0.875rem;
	line-height: 1.25rem;
	font-weight: map.get($font-weight-values, regular);
	letter-spacing: get-letter-spacing_(0.25, 0.875);
	text-decoration: inherit;
	text-transform: inherit;
}
.caption {
	font-size: 0.75rem;
	line-height: 1.25rem;
	font-weight: map.get($font-weight-values, regular);
	letter-spacing: get-letter-spacing_(0.4, 0.75);
	text-decoration: inherit;
	text-transform: inherit;
}
.button {
	font-size: 0.875rem;
	line-height: 2.25rem;
	font-weight: map.get($font-weight-values, medium);
	letter-spacing: get-letter-spacing_(1.25, 0.875);
	text-decoration: none;
	text-transform: uppercase;
}
.overline {
	font-size: 0.75rem;
	line-height: 2rem;
	font-weight: map.get($font-weight-values, medium);
	letter-spacing: get-letter-spacing_(2, 0.75);
	text-decoration: none;
	text-transform: uppercase;
}

.text-container {
	display: block;
	margin-left: auto;
	margin-right: auto;
	width: 100%;

	max-width: $typography-desktop-max-line-length;

	@media (max-width: #{$typography-text-container-breakpoint}) {
		max-width: $typography-mobile-max-line-length;
	}
}
